package TestCases;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.TimeUnit;

import Operations.Actions;






import org.apache.commons.io.FileUtils;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellType;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.openqa.selenium.OutputType;
import org.openqa.selenium.TakesScreenshot;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.edge.EdgeDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.remote.DesiredCapabilities;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.Parameters;
import org.testng.annotations.Test;

import readExcel.ReadExcel;
import readExcel.WriteExcel;

public class Testcases {
	WebDriver driver;
	String browser;
	String filePath = System.getProperty("user.dir") + "/" + "test-output";

	
	
	
	
	// To launch the Different Browsers according to the TestNG file order
	
	@Parameters("browser")
	@BeforeMethod
	public void beforeTest(String browser) {
		
		// Launching the Chrome Browser
		this.browser = browser;
		if (browser.equalsIgnoreCase("chrome")) {
			System.getProperty("webdriver.chrome.driver",
					"user.dir\\chromedriver.exe");
			driver = new ChromeDriver();
			// Launching the Microsoft Edge Browser
		} else if (browser.equalsIgnoreCase("ie")) {
			System.getProperty("webdriver.edge.driver",
					"user.dir\\MicrosoftWebDriver.exe");
			DesiredCapabilities capabilities = DesiredCapabilities.edge();
			driver = new EdgeDriver();
			// Launching the firefox Browser
		} else if (browser.equalsIgnoreCase("firefox")) {
			System.setProperty("webdriver.gecko.driver",
					"user.dir\\geckodriver.exe");
			driver = new FirefoxDriver();

		}
	}

	
	@Test(priority = 1)
	public void commonCommunities() throws Exception {
		
		
		
		ReadExcel file = new ReadExcel();
		
		Sheet sheet = file.readFirstSheet(
				System.getProperty("user.dir") + "\\", "TestCase.xlsx");
							
		if (sheet != null) {
			
			int rowCount = sheet.getLastRowNum() - sheet.getFirstRowNum();
			
			for (int i = 1; i < rowCount + 1; i++) {
				Row row = sheet.getRow(i);

				if (row.getCell(1) != null
						&& row.getCell(2).toString().equals("YES")) {
					this.Communities(row.getCell(1).toString());
					System.out.println(row.getCell(1));
				} else if (row.getCell(1) != null
						&& row.getCell(2).toString().equals("NO")) {
					System.out.println(row.getCell(1) + " is Skipped");
				}
			}
		} else {
			System.out.println("Sheet not found");
		}
	}

	// Reading the Excel file and Performing the actions written in the file
	public void Communities(String sheetName) throws Exception {
		ReadExcel file = new ReadExcel();
		Actions operation = new Actions(driver);
		String implicitwait;
		Sheet Sheet = file.readExcel(System.getProperty("user.dir") + "\\",
				"TestCase.xlsx", sheetName);
		 HashMap<Integer,String> hm=new HashMap<Integer,String>();  
		createSceenshotFolder("Screenshot_For_Passed_Test_Cases");
		createSceenshotFolder("Screenshot_For_Failed_Test_Cases");
		int rowCount = Sheet.getLastRowNum() - Sheet.getFirstRowNum();
		implicitwait = Sheet.getRow(2).getCell(5).toString();
		int x = (int) Double.parseDouble(implicitwait);
		driver.manage().timeouts().implicitlyWait(x, TimeUnit.SECONDS);
		boolean toRun = true;
		for (int i = 1; i < rowCount + 1; i++) {
			Row row = Sheet.getRow(i);

			if (row.getCell(0) == null && toRun) {
				System.out.println(row.getCell(2) + "----" + row.getCell(3)
						+ "----" + row.getCell(4) + "----" + row.getCell(5));
				try	{
					operation
							.perform(
									row.getCell(2) == null ? "Not a Valid KeyWord"
											: row.getCell(2).toString(),
									row.getCell(4) == null ? null : row
											.getCell(4).toString(),
									row.getCell(3) == null ? null : row
											.getCell(3).toString(),
									row.getCell(5) == null ? null : row
											.getCell(5) + "");
					
				hm.put(i,"Pass" );
				
				} catch (Exception e) {
					System.out.println(i + 1);
					TakesScreenshot ts = (TakesScreenshot) driver;
					File source = ts.getScreenshotAs(OutputType.FILE);
					FileUtils.copyFile(source, new File(filePath + "/"
							+ "Screenshot_For_Failed_Test_Cases" + "/"
							+ (i + 1) + "_line_no_failed.png"));
					hm.put(i,"Fail" );
					System.out.println(e);
					readExcel(hm);
					
										
										/*for (int j= i+1; j<rowCount+1; j++){
						Row rowj = Sheet.getRow(j+1);
						if (rowj.getCell(0) == null && toRun) {
							System.out.println(rowj.getCell(2) + "----" + rowj.getCell(3)
									+ "----" + rowj.getCell(4) + "----" + rowj.getCell(5));
					
							try	{
								operation
										.perform(
												rowj.getCell(2) == null ? "Not a Valid KeyWord"
														: rowj.getCell(2).toString(),
														rowj.getCell(4) == null ? null : rowj
														.getCell(4).toString(),
														rowj.getCell(3) == null ? null : rowj
														.getCell(3).toString(),
														rowj.getCell(5) == null ? null : rowj
														.getCell(5) + "");
								hm.put(i,"Pass" );
							}
							catch(Exception exception)
							{
								System.out.println(j+1);
							}*/
						//}
					//}
					

					//break;
				}
				
			}
			 else if (row.getCell(0) != null) {
				// testCasesNames.add(row.getCell(0).toString());
				System.out.println("New Testcase->" + row.getCell(0)
						+ " Started");
				System.out.println(row.getCell(0) + "Passed");
				
				
				toRun = row.getCell(1).toString().equals("YES");
				
			 }}	
		
		

	}
	
	private void readExcel(HashMap<Integer, String> hm) {
		String filePath = System.getProperty("user.dir");
		String OutputPath = System.getProperty("user.dir") + "/"
				+ "test-output";

		try {
			File src = new File(filePath + "\\" + "TestCase.xlsx");
			FileInputStream fis = new FileInputStream(src);
			XSSFWorkbook wb = new XSSFWorkbook(fis);
			XSSFSheet sh1 = wb.getSheetAt(2);
			FileOutputStream fout = new FileOutputStream(new File(OutputPath
					+ "\\" + "TestOutput.xlsx"));
			Row outrow = sh1.getRow(0);

			Cell cell = outrow.createCell(6);

			cell.setCellValue("Result");
			wb.write(fout);
			writeData(hm);
			fis.close();

		} catch (Exception e) {

			System.out.println(e.getMessage());

		}
		
	}


	private void writeData(HashMap<Integer, String> hm) throws IOException {
		String filePath = System.getProperty("user.dir");
		String OutputPath = System.getProperty("user.dir") + "/"
				+ "test-output";
		File src = new File(filePath + "\\" + "TestCase.xlsx");
		FileOutputStream fout = new FileOutputStream(new File(OutputPath
				+ "\\" + "TestOutput.xlsx"));
		FileInputStream fis;
		fis = new FileInputStream(src);
		XSSFWorkbook wb = new XSSFWorkbook(fis);
		XSSFSheet sh1 = wb.getSheetAt(2);
		for (Map.Entry m : hm.entrySet()) {
			Row result = sh1.getRow(Integer.parseInt(m.getKey().toString()));
			Cell cellRes = result.createCell(7);
			cellRes.setCellValue(m.getValue().toString());
		}
		 wb.write(fout);

		 fis.close();
		 
	}
		
	


	private void createSceenshotFolder(String folderName) {
		String newFolderPath = filePath;
		String screenShotPath = newFolderPath + "/" + folderName;
		File f = new File(screenShotPath);
		f.mkdir();
	}

}
